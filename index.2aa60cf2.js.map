{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar score = 0;\nvar win = false;\nvar lose = false;\nvar board = [\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ]\n];\nfunction initializeField() {\n    addRandomTile();\n    addRandomTile();\n    score = 0;\n    win = false;\n    lose = false;\n    updateField();\n    document.querySelector(\".message-start\").classList.add(\"hidden\");\n    document.querySelector(\".button.start\").textContent = \"Restart\";\n    document.querySelector(\".button.start\").classList.add(\"restart\");\n}\nfunction addRandomTile() {\n    var emptyCells = [];\n    for(var r = 0; r < 4; r++){\n        for(var c = 0; c < 4; c++)if (board[r][c] === 0) emptyCells.push({\n            row: r,\n            column: c\n        });\n    }\n    if (emptyCells.length === 0) return;\n    var cellRandom = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n    board[cellRandom.row][cellRandom.column] = Math.random() < 0.9 ? 2 : 4;\n}\nfunction updateField() {\n    var cells = document.querySelectorAll(\".field-cell\");\n    cells.forEach(function(cell, index) {\n        var x = Math.floor(index / 4);\n        var y = index % 4;\n        cell.textContent = board[x][y] === 0 ? \"\" : board[x][y];\n        cell.className = \"field-cell\";\n        if (board[x][y] !== 0) cell.classList.add(\"field-cell--\" + board[x][y]);\n    });\n    document.querySelector(\".game-score\").textContent = score;\n    if (checkWin()) {\n        win = true;\n        document.querySelector(\".message-win\").classList.remove(\"hidden\");\n    } else if (checkLose()) {\n        lose = true;\n        document.querySelector(\".message-lose\").classList.remove(\"hidden\");\n    }\n}\nfunction move(direction) {\n    if (win || lose) return;\n    var moved = false;\n    switch(direction){\n        case \"ArrowUp\":\n            moved = moveUp();\n            break;\n        case \"ArrowDown\":\n            moved = moveDown();\n            break;\n        case \"ArrowLeft\":\n            moved = moveLeft();\n            break;\n        case \"ArrowRight\":\n            moved = moveRight();\n            break;\n    }\n    if (moved) {\n        addRandomTile();\n        updateField();\n    }\n}\nfunction moveRight() {\n    var moved = false;\n    for(var row = 0; row < 4; row++){\n        for(var col = 0; col < 3; col++)if (board[row][col] !== 0) {\n            var nextCol = col + 1;\n            while(nextCol < 4 && nextCol === col + 1){\n                if (board[row][nextCol] === 0) {\n                    board[row][nextCol] = board[row][col];\n                    board[row][col] = 0;\n                    col = nextCol - 1;\n                    moved = true;\n                    moveRight();\n                } else if (board[row][nextCol] === board[row][col]) {\n                    mergeHorizontal(nextCol, col, row);\n                    moved = true;\n                    break;\n                } else break;\n                nextCol++;\n            }\n        }\n    }\n    return moved;\n}\nfunction moveLeft() {\n    var moved = false;\n    for(var row = 0; row < 4; row++){\n        for(var col = 3; col > 0; col--)if (board[row][col] !== 0) {\n            var nextCol = col - 1;\n            while(nextCol >= 0 && nextCol === col - 1){\n                if (board[row][nextCol] === 0) {\n                    board[row][nextCol] = board[row][col];\n                    board[row][col] = 0;\n                    col = nextCol;\n                    moved = true;\n                    moveLeft();\n                } else if (board[row][nextCol] === board[row][col]) {\n                    mergeHorizontal(nextCol, col, row);\n                    moved = true;\n                    break;\n                } else break;\n                nextCol--;\n            }\n        }\n    }\n    return moved;\n}\nfunction moveDown() {\n    var moved = false;\n    for(var col = 0; col < 4; col++){\n        for(var row = 2; row >= 0; row--)if (board[row][col] !== 0) {\n            var nextRow = row + 1;\n            while(nextRow < 4 && nextRow === row + 1){\n                if (board[nextRow][col] === 0) {\n                    board[nextRow][col] = board[row][col];\n                    board[row][col] = 0;\n                    row = nextRow;\n                    moved = true;\n                    moveDown();\n                } else if (board[nextRow][col] === board[row][col]) {\n                    mergeVertical(nextRow, col, row);\n                    moved = true;\n                    break;\n                } else break;\n                nextRow++;\n            }\n        }\n    }\n    return moved;\n}\nfunction moveUp() {\n    var moved = false;\n    for(var col = 0; col < 4; col++){\n        for(var row = 1; row < 4; row++)if (board[row][col] !== 0) {\n            var nextRow = row - 1;\n            while(nextRow >= 0 && nextRow === row - 1){\n                if (board[nextRow][col] === 0) {\n                    board[nextRow][col] = board[row][col];\n                    board[row][col] = 0;\n                    row = nextRow;\n                    moved = true;\n                    moveUp();\n                } else if (board[nextRow][col] === board[row][col]) {\n                    mergeVertical(nextRow, col, row);\n                    moved = true;\n                    break;\n                } else break;\n                nextRow--;\n            }\n        }\n    }\n    return moved;\n}\nfunction mergeVertical(nextRow, col, row) {\n    board[nextRow][col] *= 2;\n    score += board[nextRow][col];\n    board[row][col] = 0;\n}\nfunction mergeHorizontal(nextCol, col, row) {\n    board[row][nextCol] *= 2;\n    score += board[row][nextCol];\n    board[row][col] = 0;\n}\nfunction checkWin() {\n    for(var r = 0; r < 4; r++)for(var c = 0; c < 4; c++){\n        if (board[r][c] === 2048) return true;\n    }\n    return false;\n}\nfunction checkLose() {\n    for(var r = 0; r < 4; r++)for(var c = 0; c < 4; c++){\n        if (board[r][c] === 0) return false;\n        if (r < 3 && board[r][c] === board[r + 1][c] || c < 3 && board[r][c] === board[r][c + 1]) return false;\n    }\n    return true;\n}\ndocument.addEventListener(\"keydown\", function(typeOfEvent) {\n    move(typeOfEvent.key);\n});\ndocument.querySelector(\".button.start\").addEventListener(\"click\", function() {\n    var isGameStarted = false;\n    for(var r = 0; r < 4; r++){\n        for(var c = 0; c < 4; c++)if (board[r][c] !== 0) {\n            isGameStarted = true;\n            break;\n        }\n    }\n    if (isGameStarted === true) {\n        if (lose || win) restart();\n        else {\n            var message = \"Are you sure you want to start a new game? \" + \"All progress will be lost.\";\n            alert(message);\n            restart();\n        }\n    } else initializeField();\n});\nfunction restart() {\n    for(var r = 0; r < 4; r++)for(var c = 0; c < 4; c++)board[r][c] = 0;\n    score = 0;\n    win = false;\n    lose = false;\n    document.querySelector(\".message-lose\").classList.add(\"hidden\");\n    document.querySelector(\".message-win\").classList.add(\"hidden\");\n    initializeField();\n}\n\n//# sourceMappingURL=index.2aa60cf2.js.map\n","'use strict';\n\nlet score = 0;\nlet win = false;\nlet lose = false;\n\nconst board = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nfunction initializeField() {\n  addRandomTile();\n  addRandomTile();\n\n  score = 0;\n  win = false;\n  lose = false;\n\n  updateField();\n\n  document.querySelector('.message-start').classList.add('hidden');\n\n  document.querySelector('.button.start').textContent = 'Restart';\n\n  document.querySelector('.button.start').classList.add('restart');\n}\n\nfunction addRandomTile() {\n  const emptyCells = [];\n\n  for (let r = 0; r < 4; r++) {\n    for (let c = 0; c < 4; c++) {\n      if (board[r][c] === 0) {\n        emptyCells.push({\n          row: r,\n          column: c,\n        });\n      }\n    }\n  }\n\n  if (emptyCells.length === 0) {\n    return;\n  }\n\n  const cellRandom = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n  board[cellRandom.row][cellRandom.column] = Math.random() < 0.9\n    ? 2\n    : 4;\n}\n\nfunction updateField() {\n  const cells = document.querySelectorAll('.field-cell');\n\n  cells.forEach((cell, index) => {\n    const x = Math.floor(index / 4);\n    const y = index % 4;\n\n    cell.textContent = board[x][y] === 0\n      ? ''\n      : board[x][y];\n\n    cell.className = 'field-cell';\n\n    if (board[x][y] !== 0) {\n      cell.classList.add('field-cell--' + board[x][y]);\n    }\n  });\n\n  document.querySelector('.game-score').textContent = score;\n\n  if (checkWin()) {\n    win = true;\n\n    document.querySelector('.message-win').classList.remove('hidden');\n  } else if (checkLose()) {\n    lose = true;\n\n    document.querySelector('.message-lose').classList.remove('hidden');\n  }\n}\n\nfunction move(direction) {\n  if (win || lose) {\n    return;\n  }\n\n  let moved = false;\n\n  switch (direction) {\n    case 'ArrowUp':\n      moved = moveUp();\n      break;\n\n    case 'ArrowDown':\n      moved = moveDown();\n      break;\n\n    case 'ArrowLeft':\n      moved = moveLeft();\n      break;\n\n    case 'ArrowRight':\n      moved = moveRight();\n      break;\n  }\n\n  if (moved) {\n    addRandomTile();\n    updateField();\n  }\n}\n\nfunction moveRight() {\n  let moved = false;\n\n  for (let row = 0; row < 4; row++) {\n    for (let col = 0; col < 3; col++) {\n      if (board[row][col] !== 0) {\n        let nextCol = col + 1;\n\n        while (nextCol < 4 && nextCol === col + 1) {\n          if (board[row][nextCol] === 0) {\n            board[row][nextCol] = board[row][col];\n            board[row][col] = 0;\n            col = nextCol - 1;\n            moved = true;\n\n            moveRight();\n          } else if (board[row][nextCol] === board[row][col]) {\n            mergeHorizontal(nextCol, col, row);\n\n            moved = true;\n\n            break;\n          } else {\n            break;\n          }\n          nextCol++;\n        }\n      }\n    }\n  }\n\n  return moved;\n}\n\nfunction moveLeft() {\n  let moved = false;\n\n  for (let row = 0; row < 4; row++) {\n    for (let col = 3; col > 0; col--) {\n      if (board[row][col] !== 0) {\n        let nextCol = col - 1;\n\n        while (nextCol >= 0 && nextCol === col - 1) {\n          if (board[row][nextCol] === 0) {\n            board[row][nextCol] = board[row][col];\n            board[row][col] = 0;\n            col = nextCol;\n            moved = true;\n\n            moveLeft();\n          } else if (board[row][nextCol] === board[row][col]) {\n            mergeHorizontal(nextCol, col, row);\n\n            moved = true;\n\n            break;\n          } else {\n            break;\n          }\n          nextCol--;\n        }\n      }\n    }\n  }\n\n  return moved;\n}\n\nfunction moveDown() {\n  let moved = false;\n\n  for (let col = 0; col < 4; col++) {\n    for (let row = 2; row >= 0; row--) {\n      if (board[row][col] !== 0) {\n        let nextRow = row + 1;\n\n        while (nextRow < 4 && nextRow === row + 1) {\n          if (board[nextRow][col] === 0) {\n            board[nextRow][col] = board[row][col];\n            board[row][col] = 0;\n            row = nextRow;\n            moved = true;\n\n            moveDown();\n          } else if (board[nextRow][col] === board[row][col]) {\n            mergeVertical(nextRow, col, row);\n\n            moved = true;\n            break;\n          } else {\n            break;\n          }\n          nextRow++;\n        }\n      }\n    }\n  }\n\n  return moved;\n}\n\nfunction moveUp() {\n  let moved = false;\n\n  for (let col = 0; col < 4; col++) {\n    for (let row = 1; row < 4; row++) {\n      if (board[row][col] !== 0) {\n        let nextRow = row - 1;\n\n        while (nextRow >= 0 && nextRow === row - 1) {\n          if (board[nextRow][col] === 0) {\n            board[nextRow][col] = board[row][col];\n            board[row][col] = 0;\n            row = nextRow;\n            moved = true;\n\n            moveUp();\n          } else if (board[nextRow][col] === board[row][col]) {\n            mergeVertical(nextRow, col, row);\n\n            moved = true;\n            break;\n          } else {\n            break;\n          }\n          nextRow--;\n        }\n      }\n    }\n  }\n\n  return moved;\n}\n\nfunction mergeVertical(nextRow, col, row) {\n  board[nextRow][col] *= 2;\n  score += board[nextRow][col];\n  board[row][col] = 0;\n}\n\nfunction mergeHorizontal(nextCol, col, row) {\n  board[row][nextCol] *= 2;\n  score += board[row][nextCol];\n  board[row][col] = 0;\n}\n\nfunction checkWin() {\n  for (let r = 0; r < 4; r++) {\n    for (let c = 0; c < 4; c++) {\n      if (board[r][c] === 2048) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction checkLose() {\n  for (let r = 0; r < 4; r++) {\n    for (let c = 0; c < 4; c++) {\n      if (board[r][c] === 0) {\n        return false;\n      }\n\n      if (\n        (r < 3 && board[r][c] === board[r + 1][c])\n        || (c < 3 && board[r][c] === board[r][c + 1])\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\ndocument.addEventListener('keydown',\n  function(typeOfEvent) {\n    move(typeOfEvent.key);\n  });\n\ndocument.querySelector('.button.start').addEventListener(\n  'click', function() {\n    let isGameStarted = false;\n\n    for (let r = 0; r < 4; r++) {\n      for (let c = 0; c < 4; c++) {\n        if (board[r][c] !== 0) {\n          isGameStarted = true;\n          break;\n        }\n      }\n    }\n\n    if (isGameStarted === true) {\n      if (lose || win) {\n        restart();\n      } else {\n        const message = `Are you sure you want to start a new game? `\n        + `All progress will be lost.`;\n\n        alert(message);\n        restart();\n      }\n    } else {\n      initializeField();\n    }\n  });\n\nfunction restart() {\n  for (let r = 0; r < 4; r++) {\n    for (let c = 0; c < 4; c++) {\n      board[r][c] = 0;\n    }\n  }\n\n  score = 0;\n  win = false;\n  lose = false;\n\n  document.querySelector('.message-lose').classList.add('hidden');\n  document.querySelector('.message-win').classList.add('hidden');\n\n  initializeField();\n}\n"],"names":["score","win","lose","board","initializeField","addRandomTile","updateField","document","querySelector","classList","add","textContent","emptyCells","r","c","push","row","column","length","cellRandom","Math","floor","random","cells","querySelectorAll","forEach","cell","index","x","y","className","checkWin","remove","checkLose","mergeVertical","nextRow","col","mergeHorizontal","nextCol","addEventListener","typeOfEvent","move","direction","moved","moveUp","moveDown","moveLeft","moveRight","key","isGameStarted","alert","restart"],"version":3,"file":"index.2aa60cf2.js.map"}